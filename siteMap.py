import pandas as pd
import numpy as np
import pydeck as pdk
import shapefile
import streamlit as st
import random 
from stqdm import stqdm
import geopy.distance

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="KOD –≤ –º–µ—à–∫–µ App",
    page_icon="üê±",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'About': "–ü—Ä–æ–µ–∫—Ç –ö–û–î –≤ –º–µ—à–∫–µ. *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞* –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–∞–ª–∏—á–Ω—ã—Ö —Å–æ—Ü. —É—á—Ä–µ–∂–¥–µ–Ω–∏–π! –ù–∞—à GitHub: https://github.com/Shar170/KOD_v_meshke_MOS"
    }
    )


st.sidebar.markdown(
    '<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">',
    unsafe_allow_html=True,)

query_params = st.experimental_get_query_params()
tabs = ["–ê–Ω–∞–ª–∏–∑", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"]
if "tab" in query_params:
    active_tab = query_params["tab"][0]
else:
    active_tab = tabs[0]

if active_tab not in tabs:
    st.experimental_set_query_params(tab=tabs[0])
    active_tab = tabs[0]

li_items = "".join(
    f"""
    <li class="nav-item">
        <a class="nav-link{' active' if t==active_tab else ''}" href="/?tab={t}">{t}</a>
    </li>
    """
    for t in tabs
)
tabs_html = f"""
    <ul class="nav nav-tabs">
    {li_items}
    </ul>
"""

st.sidebar.markdown(tabs_html, unsafe_allow_html=True)
st.sidebar.markdown("<br>", unsafe_allow_html=True)



def read_shapefile(sf_shape):
    """
    Read a shapefile into a Pandas dataframe with a 'coords' 
    column holding the geometry information. This uses the pyshp
    package
    """
    fields = [x[0] for x in sf_shape.fields][1:]
    records = [y[:] for y in sf_shape.records()]
    #records = sf_shape.records()
    shps = [s.points for s in sf_shape.shapes()]
    df = pd.DataFrame(columns=fields, data=records)
    df = df.assign(coords=shps)
    return df

@st.cache
def load_shp():
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ shape —Ñ–∞–π–ª–∞ –æ —Ä–∞–∑–±–∏–µ–Ω–∏–∏ –Ω–∞ —è—á–µ–π–∫–∏
    """
    #–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–æ—á–Ω–æ–º —Ä–∞–±–∏–µ–Ω–∏–∏ –ú–û –≤ –ø–∞–º—è—Ç—å
    myshp = open("fishnet2021.shp", "rb")
    mydbf = open("fishnet2021.dbf", "rb")
    r = shapefile.Reader(shp=myshp, dbf=mydbf)
    return read_shapefile(r)
    #–≤ –ø–æ–ª–µ coords –ø–µ—Ä–≤–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –µ–≥–æ —É–≥–ª—ã
s_df = load_shp()

@st.cache
def load_h_w():
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –î–æ–º-–†–∞–±–æ—Ç–∞ 
    """
    #—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –î–æ–º-–†–∞–±–æ—Ç–∞ –∏ –ø—Ä–∏–∫—Ä—É—á–∏–≤–∞–µ–º —Ç—É–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    h_w_matrix = pd.read_csv("04_CMatrix_Home_Work_July.csv")
    h_w_matrix = h_w_matrix.merge(right=s_df, how='inner', left_on='home_zid', right_on='cell_zid')
    h_w_matrix = h_w_matrix.merge(right=s_df, how='inner', left_on='work_zid', right_on='cell_zid')
    h_w_matrix.drop('cell_zid_x', axis=1, inplace=True)
    h_w_matrix.drop('cell_zid_y', axis=1, inplace=True)
    return h_w_matrix

def load_names():
    """ 
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –≤—Å–µ—Ö —Ä–µ–≥–∏–Ω–æ–≤ –∏ –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    """
    loc_names = pd.read_csv('rebuilded_names.csv')
    return loc_names.merge(right=s_df, how='inner', left_on='cell_zid', right_on='cell_zid')

def load_loc_info():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∂–∏–≤–∞—é—â–µ–≥–æ, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –∏ –ø—Ä–æ—Ö–æ–¥—è—â–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
    """
    c_locations = pd.read_csv("june_full_data.csv")
    
    # c_locations['mfc_chance'] = c_locations['mfc_chance'].apply(lambda m: '‚≠ê'*int(m))
    return c_locations

@st.cache
def get_unic_names():
    return  pd.read_csv('rebuilded_names.csv')['adm_name'].drop_duplicates(inplace=False).values

def get_assessment(percent):
    outstr = ""
    if percent < 0.5:                   outstr = '–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è'
    if percent < 0.8 and percent >=0.5: outstr = '–ù–∏–∑–∫–∞—è'
    if percent < 0.9 and percent >=0.8: outstr = '–°—Ä–µ–¥–Ω—è—è'
    if percent < 1.2 and percent >=0.9: outstr = '–í—ã—Å–æ–∫–∞—è'
    if percent > 1.5:                   outstr = '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è'
    return outstr

def load_mfc_info():
    """
    –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ú–§–¶
    """
    mfc = pd.read_csv("mos_coords.csv")
    mfc['District'] = mfc['District'].apply(lambda x: x.replace('—Ä–∞–π–æ–Ω', '').strip())
    mfc['metaInfo'] = "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: " + mfc['ShortName'] + \
                    "<br/>–ê–¥—Ä–µ—Å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è: " + mfc['Address'] + \
                    "<br/>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–∞—è/–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: " + mfc['people_flow_rate'].apply(str) + "/" + mfc['max_people_flow'].apply(str) + \
                    "<br/>–°—Ç–µ–ø–µ–Ω—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏: " + (mfc['people_flow_rate']/ mfc['max_people_flow']).apply(lambda x: f"{x:.{3}f}") + " - " +  (mfc['people_flow_rate']/ mfc['max_people_flow']).apply(lambda x: get_assessment(x).lower())
    return mfc

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
loc_names = load_names()
c_locations = load_loc_info()
adm_names = get_unic_names()
mfc_info_df = load_mfc_info()
b_types_array = ['–ú–§–¶','–®–∫–æ–ª–∞','–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä']


#—Å–æ–∑–¥–∞—ë–º —Å–µ–ª–µ–∫—Ç –±–æ–∫—Å—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title('–ü—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã "KOD –≤ –º–µ—à–∫–µ"')

is_run_build = None
models_dict = {'–¢–æ—á–µ—á–Ω–∞—è –º–æ–¥–µ–ª—å':'mfc_chance_agreg','–°–µ–∫—Ç–æ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å':'mfc_chance_balance'}
models_descr = {'–¢–æ—á–µ—á–Ω–∞—è –º–æ–¥–µ–ª—å':'–¢–æ—á–µ—á–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–æ–π–∫–∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è','–°–µ–∫—Ç–æ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å':'–°—Ç—Ä–æ–∏—Ç —Å–µ–∫—Ç–æ—Ä–∞ –¥–æ—á–µ—Ä–Ω–∏–∫ –∫ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è–º –æ–±–ª–∞—Å—Ç–µ–π. –ü–æ–ª–µ–∑–Ω–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π'}

if active_tab == tabs[0]: #–∞–Ω–∞–ª–∏–∑ –±–ª–æ–∫
    adm_zone = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –∑–æ–Ω—É',adm_names, )
    print_all_btn = st.sidebar.checkbox('–í—ã–≤–µ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤', value=False)
    build_type = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è',b_types_array)
    show_mfc = st.sidebar.checkbox('–ü–æ–∫–∞–∑–∞—Ç—å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ', value=False)
    model_type = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Ä–∞—Å—á—ë—Ç–æ–≤',models_dict)
    st.sidebar.write(models_descr[model_type])
elif active_tab == tabs[1]: #—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –±–ª–æ–∫
    print_all_btn = True
    show_mfc = True
    build_type = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è',b_types_array)
    address = st.sidebar.text_input(f"–ê–¥—Ä–µ—Å –±—É–¥—É—é—â–µ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è ({build_type})")
    windows_count = st.sidebar.text_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω", value=20)
    model_type = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Ä–∞—Å—á—ë—Ç–æ–≤',models_dict)
    st.sidebar.write(models_descr[model_type])
    id_cell = st.sidebar.text_input("ID —è—á–µ–π–∫–∏ —Å—Ç—Ä–æ–∏—Ç–∫–ª—å—Å—Ç–≤–∞", value=95664)

    is_run_build = st.sidebar.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å!")
else:
    st.sidebar.error("Something has gone terribly wrong.")


model_key = models_dict[model_type]
st.sidebar.image('whiteCat.png', width=100)

#–∏–∑–≤–ª–µ–∫–∞–µ–º —è—á–µ–π–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –º–µ–Ω—é —Ä–∞–π–æ–Ω–∞ –ú–æ—Å–∫–≤—ã
if print_all_btn:
    df = c_locations.copy()#.loc[c_locations['zid'].isin(loc_names.loc[loc_names['adm_name'] == adm_zone]['cell_zid'])]
else:
    df = c_locations.loc[c_locations['zid'].isin(loc_names.loc[loc_names['adm_name'] == adm_zone]['cell_zid'])]

#–í—ã–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ (–Ω–∞—Å–µ–ª–µ–Ω–∏–µ, –ø–ª–æ—â–∞–¥—å) –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é 

if print_all_btn:
    st.write(f'''–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å—é –ú–æ—Å–∫–≤—É —Å–µ–π—á–∞—Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –≤ –Ω–µ–π: {sum(df["customers_cnt_home"].values) + sum(df["customers_cnt_move"].values)} —á–µ–ª. –Ω–∞ { df.shape[0]*0.25} –∫–º¬≤''')
else:
    st.write(f'''–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–π–æ–Ω "{adm_zone}" —Å–µ–π—á–∞—Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –≤ –Ω—ë–º: {sum(df["customers_cnt_home"].values) + sum(df["customers_cnt_move"].values)} —á–µ–ª. –Ω–∞ { df.shape[0]*0.25} –∫–º¬≤''')

st.write(f'üî¥ –ö—Ä–∞—Å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ - –º–µ—Å—Ç–∞ —Å –≤—ã—Å–æ–∫–æ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å—é –≤ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö —Ç–∏–ø–∞ "{build_type}"')
st.write(f'üü¢ –ó–µ–ª—ë–Ω—ã–∫ –æ–±–ª–∞—Å—Ç–∏ - –º–µ—Å—Ç–∞ —Å –Ω–∏–∑–∫–æ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å—é –≤ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö —Ç–∏–ø–∞ "{build_type}"')
st.write(f'üîµ –°–∏–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ - —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —É—á—Ä–µ–∂–¥–µ–Ω–∏—è —Ç–∏–ø–∞ "{build_type}"')

#–°–æ–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤(—è—á–µ–µ–∫) –∫–∞—Ä—Ç—ã
df['metaInfo'] = "–ù–∞—Å–ª–µ–Ω–∏–µ: " + df[['customers_cnt_home', 'customers_cnt_move']].sum(axis=1).apply(str) +\
                            "<br/><b>–ü—Ä–∏—Ä–æ—Å—Ç:</b> " + df[['customers_dlt_home', 'customers_dlt_move']].sum(axis=1).apply(str) + \
                            "<br/><b>–õ–æ–≥–∏—Å—Ç–∏–∫–∞:</b> " + df['logistic'].apply(str) + \
                            "<br/><b>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:</b> <br/>" + df[model_key].apply(lambda m: 'üî¥'*int(m)) + df[model_key].apply(lambda m: '‚≠ï'*(5-int(m)))

mfc_df = mfc_info_df.copy() if print_all_btn else mfc_info_df.loc[mfc_info_df['global_id'].isin(df['nearest_mfc_id'])]

import re
mfc_df['geodata_center'] = mfc_df['geodata_center'].apply(lambda x: tuple(map(float, re.findall(r'[0-9]+\.[0-9]+', str(x)))))


world_map = st.empty()

if is_run_build:
    id_cell = int(id_cell)
    mfc_df.loc[len(df)] = {"global_id ":-1.0,       
                            "Address":address,          
                            "ShortName":f'{build_type} "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π"',        
                            "WindowCount":windows_count,      
                            'geodata_center':(float(df.loc[df['zid'] == id_cell]['lon'].values[0]),float(df.loc[df['zid'] == id_cell]['lat'].values[0])),
                            "lon":df.loc[df['zid'] == id_cell]['lon'].values[0],             
                            "lat":df.loc[df['zid'] == id_cell]['lat'].values[0],            
                            "District":"",
                            "metaInfo":"",}
    

    st.dataframe(df.head())

    stqdm.pandas(desc = "–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π")
    df['nearest_mfc_id'] = 0
    df['nearest_mfc_id'] = df['zid'].progress_apply(
    lambda x: mfc_df.loc[mfc_df['geodata_center'].apply(
        lambda y: geopy.distance.distance((y[0],y[1]),
                          (float(df.loc[df['zid']==x]['lat'].values[0]),
                           float(df.loc[df['zid']==x]['lon'].values[0]))
                                    ).m
        ).idxmin()]['global_id'])

    stqdm.pandas(desc = "–†–∞—á—ë—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–π –¥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π")
    df['nearest_mfc_distance'] = -1
    df['nearest_mfc_distance'] = df['zid'].progress_apply(
    lambda x: geopy.distance.distance(mfc_df.loc[mfc_df['global_id'] == df.loc[df['zid']==x]['nearest_mfc_id'].values[0]]['geodata_center'], 
                                    (df.loc[df['zid']==x]['lat'].values[0], df.loc[df['zid']==x]['lon'].values[0])).m)



    mfc_df['metaInfo'] = "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: " + mfc_df['ShortName'] + \
                    "<br/>–ê–¥—Ä–µ—Å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è: " + mfc_df['Address'] + \
                    "<br/>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–∞—è/–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: " + mfc_df['people_flow_rate'].apply(str) + "/" + mfc_df['max_people_flow'].apply(str) + \
                    "<br/>–°—Ç–µ–ø–µ–Ω—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏: " + (mfc_df['people_flow_rate']/ mfc_df['max_people_flow']).apply(lambda x: f"{x:.{3}f}") + " - " +  (mfc_df['people_flow_rate']/ mfc_df['max_people_flow']).apply(lambda x: get_assessment(x).lower())

    stqdm.pandas(desc = "–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≥–æ–Ω–∫–∏ –º–æ–¥–µ–ª–∏")
    if model_type == 'mfc_chance_agreg':
        df[model_type] = 0

        #–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–ª–∏—è–Ω–∏—è –≤–µ—Å–æ–≤ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π
        alphas = {'home':1.0,'job':1.0,'day':1.0, 'move':1.0}
        alphas_dlt = {'home':0.5,'job':0.5,'day':0.5, 'move':0.5}

        stqdm.pandas(desc="–ü–µ—Ä–µ—Ä–∞—Å—á—ë—Ç —Ç–æ—á–µ—Å–Ω–æ–π –º–æ–¥–µ–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

        for feature in ['home', 'job', 'day', 'move']:
            df[model_type] = df[model_type] + alphas[feature] * df[f'customers_cnt_{feature}']
        for feature in ['home', 'job', 'day', 'move']:
            df[model_type] = df[model_type] + alphas_dlt[feature] *  df[f'customers_dlt_{feature}']  
            
        df[model_type] = df[model_type] + (df['nearest_mfc'])# / 43617.48364582916)*1000
        df[model_type] = df[model_type] + (df['logistic'])

        df[model_type] = df[model_type].progress_apply(lambda x: 1 + 5* x / 42070.344117)
    else :
        
        def coeff_flow(percent):
            input_arr = [0.75,0.95,1.1,1.5,5]
            output_arr = [0.3,0.7,1.3,2,2]
            return np.interp(percent, input_arr, output_arr, left=0.0, right=2.0)

        def coeff_distance(km_dist):
            input_arr = [2,3.5,5]
            output_arr = [0.3,0.7,1.0]
            return np.interp(km_dist, input_arr, output_arr, left=0.0,right=1.0)

        def coeff_logistic(log_persent):
            input_arr = [0.5,1,1.5]
            output_arr = [0.3,0.5,1.0,]
            return np.interp(log_persent, input_arr, output_arr, left=0.0,right=1.0)
    
        #–†–∞—Å—á—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
        df[model_type] = df['nearest_mfc_id'].progress_apply(lambda x: coeff_flow(mfc_df.loc[mfc_df['global_id'] == x]['people_flow_rate'].values[0] / mfc_df.loc[mfc_df['global_id'] == x]['max_people_flow'].values[0]) )
        #–†–∞—Å—á—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥—è –∏–∑ –±—É–¥—É—â–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
        mfc_df['future_people_flow_rate'] = mfc_df['global_id'].progress_apply(lambda x: df.loc[df['nearest_mfc_id'] == x][summ_columns].values.sum())
        summ_columns = ['customers_cnt_home','customers_cnt_job','customers_cnt_day'] #–ø–æ–ª—è –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è —Å—É–º–º–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π
        df[model_type] = df[model_type] + 0.5 *   df['nearest_mfc_id'].progress_apply(lambda x: coeff_flow(mfc_df.loc[mfc_df['global_id'] == x]['future_people_flow_rate'].values[0] / mfc_df.loc[mfc_df['global_id'] == x]['max_people_flow'].values[0]) )
        #–†–∞—Å—á—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥—è –∏–∑ —É–¥–∞–ª—ë–Ω–Ω–æ—Å—Ç–∏ 
        df[model_type] = df[model_type] +  df['nearest_mfc_distance'].progress_apply(lambda x: coeff_distance(x / 1000.0) )
        #–†–∞—Å—á—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥—è –∏–∑ –ª–æ–≥–∏—Å—Ç–∏–∫–∏
        df[model_type] = df[model_type] +  (df['nearest_mfc_id'].progress_apply(lambda x: coeff_logistic(df.loc[df['nearest_mfc_id'] == x]['logistic'].mean())) /  df['logistic']).apply(lambda x: coeff_logistic(x)) #





tooltip_template = '{metaInfo}'
layers=[
    pdk.Layer("ColumnLayer", #—Å–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
    data=df,
    get_position='[lon,lat]',
    get_elevation=model_key,
    elevation_scale=200,
    radius=250,
    get_fill_color=[f"{model_key} * 42 - 15",f"255-{model_key}*42",20, 255],
    pickable=True,
    auto_highlight=True,
    )]





if show_mfc:

    layers.append(pdk.Layer("ColumnLayer", #—Å–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ú–§–¶
        data=mfc_df,
        get_position='[lat,lon]',
        elevation=100,#"WindowCount",
        elevation_scale=1,
        radius=50,
        get_fill_color=[1,1,255, 200],
        pickable=True,
        auto_highlight=True,    
        ))

#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Ä–∞–π–æ–Ω–æ–≤ –∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π
preview_lat = df['lat'].values[0]
preview_lon = df['lon'].values[0]
if is_run_build:
    preview_lat = df.loc[df['zid'] == id_cell]['lat'].values[0]
    preview_lon = df.loc[df['zid'] == id_cell]['lon'].values[0]

world_map = pdk.Deck(
    map_style='mapbox://styles/mapbox/light-v9',
    initial_view_state=pdk.ViewState(latitude=preview_lat,longitude=preview_lon,zoom=11,pitch=50,),
     tooltip = {
        "html": tooltip_template,
        "style": {"backgroundColor": "black","color": "white"}
    },
    layers=layers,
)

map_widget = st.pydeck_chart(world_map)


#–∞–Ω–∞–ª–∏—Ç–∏–∫–∞

col1, col2, col3 = st.columns(3)
col1.metric("–ü—Ä–æ–∂–∏–≤–∞—é—â–∏–µ –∫–æ–ª-–≤–æ", str(sum(df['customers_cnt_home'].values) + sum(df['customers_cnt_move'].values)) + " —á–µ–ª.", str(sum(df['customers_dlt_home'].values)+sum(df['customers_dlt_move'].values)) + " —á–µ–ª.")
col2.metric("–†–∞–±–æ—Ç–∞—é—â–∏–µ –∫–æ–ª-–≤–æ", str(sum(df['customers_cnt_job'].values)) + " —á–µ–ª.", str(sum(df['customers_dlt_job'].values)) + " —á–µ–ª.")
col3.metric("–î–Ω–µ–≤–Ω–æ–µ –∫–æ–ª-–≤–æ", str(sum(df['customers_cnt_day'].values)) + " —á–µ–ª.", str(sum(df['customers_dlt_day'].values)) + " —á–µ–ª.")

import pandas as pd
import numpy as np
import pydeck as pdk
import shapefile
import streamlit as st

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="KOD –≤ –º–µ—à–∫–µ App",
    page_icon="üê±",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'About': "–ü—Ä–æ–µ–∫—Ç –ö–û–î –≤ –º–µ—à–∫–µ. *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞* –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–∞–ª–∏—á–Ω—ã—Ö —Å–æ—Ü. —É—á—Ä–µ–∂–¥–µ–Ω–∏–π! –ù–∞—à GitHub: https://github.com/Shar170/KOD_v_meshke_MOS"
    }
)


#—Ñ—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è shape —Ñ–∞–π–ª–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Å–µ—Ç–∫–∏ —Ä–∞–π–Ω–æ–≤
def read_shapefile(sf_shape):
    """
    Read a shapefile into a Pandas dataframe with a 'coords' 
    column holding the geometry information. This uses the pyshp
    package
    """
    fields = [x[0] for x in sf_shape.fields][1:]
    records = [y[:] for y in sf_shape.records()]
    #records = sf_shape.records()
    shps = [s.points for s in sf_shape.shapes()]
    df = pd.DataFrame(columns=fields, data=records)
    df = df.assign(coords=shps)
    return df

@st.cache
def load_shp():
    #–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–æ—á–Ω–æ–º —Ä–∞–±–∏–µ–Ω–∏–∏ –ú–û –≤ –ø–∞–º—è—Ç—å
    myshp = open("fishnet2021.shp", "rb")
    mydbf = open("fishnet2021.dbf", "rb")
    r = shapefile.Reader(shp=myshp, dbf=mydbf)
    return read_shapefile(r)
    #–≤ –ø–æ–ª–µ coords –ø–µ—Ä–≤–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –µ–≥–æ —É–≥–ª—ã
s_df = load_shp()


@st.cache
def load_h_w():
    #—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –î–æ–º-–†–∞–±–æ—Ç–∞ –∏ –ø—Ä–∏–∫—Ä—É—á–∏–≤–∞–µ–º —Ç—É–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    h_w_matrix = pd.read_csv("04_CMatrix_Home_Work_July.csv")
    h_w_matrix = h_w_matrix.merge(right=s_df, how='inner', left_on='home_zid', right_on='cell_zid')
    h_w_matrix = h_w_matrix.merge(right=s_df, how='inner', left_on='work_zid', right_on='cell_zid')
    h_w_matrix.drop('cell_zid_x', axis=1, inplace=True)
    h_w_matrix.drop('cell_zid_y', axis=1, inplace=True)
    return h_w_matrix


#@st.cache
def load_names():
    #—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–≥–∏–Ω–æ–≤ –∏ –ø—Ä–∏–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∏–º –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    loc_names = pd.read_csv('rebuilded_names.csv')
    return loc_names.merge(right=s_df, how='inner', left_on='cell_zid', right_on='cell_zid')

#@st.cache
def load_loc_info():
    #—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∂–∏–≤–∞—é—â–µ–≥–æ, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –∏ –ø—Ä–æ—Ö–æ–¥—è—â–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ –∏ –ø—Ä–∏–∫—Ä—É—á–∏–≤–∞–µ–º —Ç—É–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
    c_locations = pd.read_csv("june_full_data.csv")
    return c_locations
@st.cache
def get_unic_names():
    return  pd.read_csv('rebuilded_names.csv')['adm_name'].drop_duplicates(inplace=False).values


def load_mfc_info():
    #—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∂–∏–≤–∞—é—â–µ–≥–æ, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –∏ –ø—Ä–æ—Ö–æ–¥—è—â–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ –∏ –ø—Ä–∏–∫—Ä—É—á–∏–≤–∞–µ–º —Ç—É–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
    mfc = pd.read_csv("mos_coords.csv")
    return mfc

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
loc_names = load_names()
c_locations = load_loc_info()
#h_w_matrix = load_h_w()
adm_names = get_unic_names()
mfc_info_df = load_mfc_info()

#st.dataframe(mfc_info_df.head())

st.title('–ü—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã "KOD –≤ –º–µ—à–∫–µ"')

st.write('–ö–∞—Ä—Ç–∞ –ú–æ—Å–∫–≤—ã –∏ –ú–û. –ö—Ä—É–≥–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ —Ä–∞–π–æ–Ω')
b_types_array = ['–ú–§–¶','–®–∫–æ–ª–∞','–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä']

adm_zone = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –∑–æ–Ω—É',adm_names, )
print_all_btn = st.sidebar.checkbox('–í—ã–≤–µ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤', value=False)
build_type = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è',b_types_array)
show_mfc = st.sidebar.checkbox('–ü–æ–∫–∞–∑–∞—Ç—å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ', value=False)
filter_dict = {'–ö–æ–ª-–≤–æ –∂–∏–≤—É—â–∏—Ö':'home','–ö–æ–ª-–≤–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö':'job','–ö–æ–ª-–≤–æ –ø—Ä–æ—Ö–æ–¥—è—â—è—Ö':'move','–õ–æ–≥–∏—Å—Ç–∏–∫–∞':'logistic'}
filter_type = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–æ—á–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä',filter_dict)
filter_value = st.sidebar.slider('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å –≤–ª–∏—è–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∞', value=1.0, min_value=0.0, max_value=5.0, step=0.05)
#press_button = st.sidebar.button("Do magic!")
st.sidebar.image('whiteCat.png', width=100)

filter_key = filter_dict[filter_type]

c_locations['mfc_chance'] = 0

#–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–ª–∏—è–Ω–∏—è –≤–µ—Å–æ–≤ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π
alphas = {'home':1.0,'job':1.0,'day':1.0, 'move':1.0}
alphas_dlt = {'home':0.5,'job':0.5,'day':0.5, 'move':0.5}

#–†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
for feature in ['home', 'job', 'day', 'move']:#–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    c_locations['mfc_chance'] = c_locations['mfc_chance'] + (filter_value if filter_key == feature else (1.0)) * alphas[feature] * c_locations[f'customers_cnt_{feature}']
for feature in ['home', 'job', 'day', 'move']:#–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–ª—å—Ç—ã –∏–∑–º–µ–Ω–∏—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–µ–π
    c_locations['mfc_chance'] = c_locations['mfc_chance'] + (filter_value if filter_key == feature else  (1.0)) * alphas_dlt[feature] *  c_locations[f'customers_dlt_{feature}']  

#–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞—Ü–∏—è —à–∞–Ω—Å–∞ –∑–∞ —Å—á—ë—Ç –±–æ–ª—å—à–æ–π —É–¥–∞–ª—ë–Ω–Ω–æ—Å—Ç–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π
c_locations['mfc_chance'] = c_locations['mfc_chance'] + (c_locations['nearest_mfc'])
#–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞—Ü–∏—è —à–∞–Ω—Å –∑–∞ —Å—á—ë—Ç –≤—ã—Å–æ–∫–æ–π –ª–æ–≥–∏—á—Ç–∏–∫–∏ –≤–Ω—É—Ç—Ä–∏ —è—á–µ–π–∫–∏
c_locations['mfc_chance'] = c_locations['mfc_chance'] + (filter_value if filter_key == 'logistic' else  (1.0)) * (c_locations['logistic'])
#–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–Ω—Å–∞ 
c_locations['mfc_chance'] = c_locations['mfc_chance'].apply(lambda x: 1 + 10* x / 42070.344117)
c_locations['mfc_score'] = c_locations['mfc_chance'].apply(lambda x: '‚≠ê'*int(x))

#–∏–∑–≤–ª–µ–∫–∞–µ–º —è—á–µ–π–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –º–µ–Ω—é —Ä–∞–π–æ–Ω–∞ –ú–æ—Å–∫–≤—ã
if print_all_btn:
    df = c_locations.copy()#.loc[c_locations['zid'].isin(loc_names.loc[loc_names['adm_name'] == adm_zone]['cell_zid'])]
else:
    df = c_locations.loc[c_locations['zid'].isin(loc_names.loc[loc_names['adm_name'] == adm_zone]['cell_zid'])]

#–í—ã–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã—å—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ (–Ω–∞—Å–µ–ª–µ–Ω–∏–µ, –ø–ª–æ—â–∞–¥—å) –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é 
st.write(f'''–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–π–æ–Ω "{adm_zone}" —Å–µ–π—á–∞—Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –≤ –Ω—ë–º: {sum(df["customers_cnt_home"].values) + sum(df["customers_cnt_move"].values)} —á–µ–ª. –Ω–∞ { df.shape[0]*0.25} –∫–º¬≤
            –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—é —Ç–∏–ø–∞: "{build_type}" —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –≤–ª–∏—è–Ω–∏—è —Ä–∞–≤–Ω—ã–º {filter_value}
            —Å —É—á—ë—Ç–æ–º —Ç–æ–≥–æ —á—Ç–æ —ç—Ç–æ –±—É–¥–µ—Ç {filter_type.lower()}.
''')
#–°–æ–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤(—è—á–µ–µ–∫) –∫–∞—Ä—Ç—ã
if filter_key != 'logistic':
    tooltip_template = "<b>" + filter_type + " :</b> {customers_cnt_"+filter_key+"} <br/><b>–ù–µ–æ–±—Ö–æ–¥–∏—Å–æ—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ "+build_type+" :</b> {mfc_score} <br/>"
else:
    tooltip_template = "<b>" + filter_type + " :</b> {logistic} <br/><b>–ù–µ–æ–±—Ö–æ–¥–∏—Å–æ—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ "+build_type+" :</b> {mfc_score} <br/>"

layers=[
        pdk.Layer("ColumnLayer", #—Å–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
        data=df,
        get_position='[lon,lat]',
        get_elevation="mfc_chance",
        elevation_scale=100,
        radius=250,
        get_fill_color=["mfc_chance * 21","255-mfc_chance*21",1, 200],
        pickable=True,
        auto_highlight=True,
        ),
        pdk.Layer(
            "TextLayer",
            data=mfc_info_df,
            get_position='[lon,lat]',
            #get_text="mfc_chance",
            text='–ú–§–¶',
            #elevation_scale=100,
            #radius=250,
            pickable=False,
            auto_highlight=True,
        )]

if show_mfc:
    layers.append(pdk.Layer("ColumnLayer", #—Å–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ú–§–¶
        data=mfc_info_df if print_all_btn else mfc_info_df.loc['—Ä–∞–π–æ–Ω '+adm_zone.lower() == mfc_info_df['District'].str.lower() ],
        get_position='[lat,lon]',
        elevation=100,#"WindowCount",
        elevation_scale=1,
        radius=50,
        get_fill_color=[1,1,255, 200],
        pickable=True,
        auto_highlight=True,    
        ))




#–û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è —Ä–∞–π–æ–Ω–æ–≤ –∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π
world_map = pdk.Deck(
    map_style='mapbox://styles/mapbox/light-v9',
    initial_view_state=pdk.ViewState(latitude=df['lat'].values[0],longitude=df['lon'].values[0],zoom=11,pitch=50,),
     tooltip = {
        "html": tooltip_template,
        "style": {"backgroundColor": "black","color": "white"}
    },
    layers=layers,
)



success_box = None
def handle_on_click(widget_instance, payload):
    global success_box
    try:
        success_box.body = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —è—á–µ–π–∫—É {payload}!'
        coords = payload['data']['coordinate']
    except Exception as e:
        success_box.body = 'Error: %s' % e
world_map.deck_widget.on_click(handle_on_click)

map_widget = st.pydeck_chart(world_map)






#–∞–Ω–∞–ª–∏—Ç–∏–∫–∞

col1, col2, col3 = st.columns(3)
col1.metric("–ü—Ä–æ–∂–∏–≤–∞—é—â–∏–µ –∫–æ–ª-–≤–æ", str(sum(df['customers_cnt_home'].values)+sum(df['customers_cnt_move'].values)) + " —á–µ–ª.", str(sum(df['customers_dlt_home'].values)+sum(df['customers_dlt_move'].values)) + " —á–µ–ª.")
col2.metric("–†–∞–±–æ—Ç–∞—é—â–∏–µ –∫–æ–ª-–≤–æ", str(sum(df['customers_cnt_job'].values)) + " —á–µ–ª.", str(sum(df['customers_dlt_job'].values)) + " —á–µ–ª.")
col3.metric("–î–Ω–µ–≤–Ω–æ–µ –∫–æ–ª-–≤–æ", str(sum(df['customers_cnt_day'].values)) + " —á–µ–ª.", str(sum(df['customers_dlt_day'].values)) + " —á–µ–ª.")



#st.write('–¢–∞–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
#st.dataframe(c_locations)
#st.dataframe(loc_names)
#st.dataframe(s_df)
#st.dataframe(h_w_matrix)
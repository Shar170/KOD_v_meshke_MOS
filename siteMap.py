import pandas as pd
import numpy as np
import pydeck as pdk
import shapefile
import streamlit as st

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="KOD –≤ –º–µ—à–∫–µ App",
    page_icon="üê±",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'About': "–ü—Ä–æ–µ–∫—Ç –ö–û–î –≤ –º–µ—à–∫–µ. *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞* –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–∞–ª–∏—á–Ω—ã—Ö —Å–æ—Ü. —É—á—Ä–µ–∂–¥–µ–Ω–∏–π! –ù–∞—à GitHub: https://github.com/Shar170/KOD_v_meshke_MOS"
    }
    )

def read_shapefile(sf_shape):
    """
    Read a shapefile into a Pandas dataframe with a 'coords' 
    column holding the geometry information. This uses the pyshp
    package
    """
    fields = [x[0] for x in sf_shape.fields][1:]
    records = [y[:] for y in sf_shape.records()]
    #records = sf_shape.records()
    shps = [s.points for s in sf_shape.shapes()]
    df = pd.DataFrame(columns=fields, data=records)
    df = df.assign(coords=shps)
    return df

@st.cache
def load_shp():
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ shape —Ñ–∞–π–ª–∞ –æ —Ä–∞–∑–±–∏–µ–Ω–∏–∏ –Ω–∞ —è—á–µ–π–∫–∏
    """
    #–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–æ—á–Ω–æ–º —Ä–∞–±–∏–µ–Ω–∏–∏ –ú–û –≤ –ø–∞–º—è—Ç—å
    myshp = open("fishnet2021.shp", "rb")
    mydbf = open("fishnet2021.dbf", "rb")
    r = shapefile.Reader(shp=myshp, dbf=mydbf)
    return read_shapefile(r)
    #–≤ –ø–æ–ª–µ coords –ø–µ—Ä–≤–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –µ–≥–æ —É–≥–ª—ã
s_df = load_shp()

@st.cache
def load_h_w():
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –î–æ–º-–†–∞–±–æ—Ç–∞ 
    """
    #—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –î–æ–º-–†–∞–±–æ—Ç–∞ –∏ –ø—Ä–∏–∫—Ä—É—á–∏–≤–∞–µ–º —Ç—É–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    h_w_matrix = pd.read_csv("04_CMatrix_Home_Work_July.csv")
    h_w_matrix = h_w_matrix.merge(right=s_df, how='inner', left_on='home_zid', right_on='cell_zid')
    h_w_matrix = h_w_matrix.merge(right=s_df, how='inner', left_on='work_zid', right_on='cell_zid')
    h_w_matrix.drop('cell_zid_x', axis=1, inplace=True)
    h_w_matrix.drop('cell_zid_y', axis=1, inplace=True)
    return h_w_matrix

def load_names():
    """ 
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –≤—Å–µ—Ö —Ä–µ–≥–∏–Ω–æ–≤ –∏ –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    """
    loc_names = pd.read_csv('rebuilded_names.csv')
    return loc_names.merge(right=s_df, how='inner', left_on='cell_zid', right_on='cell_zid')

def load_loc_info():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∂–∏–≤–∞—é—â–µ–≥–æ, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –∏ –ø—Ä–æ—Ö–æ–¥—è—â–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
    """
    c_locations = pd.read_csv("june_full_data.csv")
    
    # c_locations['mfc_chance'] = c_locations['mfc_chance'].apply(lambda m: '‚≠ê'*int(m))
    return c_locations

@st.cache
def get_unic_names():
    return  pd.read_csv('rebuilded_names.csv')['adm_name'].drop_duplicates(inplace=False).values

def load_mfc_info():
    """
    –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ú–§–¶
    """
    mfc = pd.read_csv("mos_coords.csv")
    mfc['District'] = mfc['District'].apply(lambda x: x.replace('—Ä–∞–π–æ–Ω', '').strip())
    mfc['metaInfo'] = "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: " + mfc['ShortName'] + \
                    "<br/>–ê–¥—Ä–µ—Å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è: " + mfc['Address'] + \
                    "<br/>–¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å: " + mfc['people_flow_rate'].apply(str) + \
                    "<br/>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å: " + mfc['max_people_flow'].apply(str)
    return mfc

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
loc_names = load_names()
c_locations = load_loc_info()
adm_names = get_unic_names()
mfc_info_df = load_mfc_info()
b_types_array = ['–ú–§–¶','–®–∫–æ–ª–∞','–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä']



#—Å–æ–∑–¥–∞—ë–º —Å–µ–ª–µ–∫—Ç –±–æ–∫—Å—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title('–ü—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã "KOD –≤ –º–µ—à–∫–µ"')
adm_zone = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –∑–æ–Ω—É',adm_names, )
print_all_btn = st.sidebar.checkbox('–í—ã–≤–µ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤', value=False)
build_type = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è',b_types_array)
show_mfc = st.sidebar.checkbox('–ü–æ–∫–∞–∑–∞—Ç—å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ', value=False)
models_dict = {'–ê–≥—Ä–µ–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å':'mfc_chance_agreg','–ë–∞–ª–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å':'mfc_chance_balance'}
model_type = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Ä–∞—Å—á—ë—Ç–æ–≤',models_dict)
st.sidebar.image('whiteCat.png', width=100)


model_key = models_dict[model_type]

#–∏–∑–≤–ª–µ–∫–∞–µ–º —è—á–µ–π–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –º–µ–Ω—é —Ä–∞–π–æ–Ω–∞ –ú–æ—Å–∫–≤—ã
if print_all_btn:
    df = c_locations.copy()#.loc[c_locations['zid'].isin(loc_names.loc[loc_names['adm_name'] == adm_zone]['cell_zid'])]
else:
    df = c_locations.loc[c_locations['zid'].isin(loc_names.loc[loc_names['adm_name'] == adm_zone]['cell_zid'])]

#–í—ã–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ (–Ω–∞—Å–µ–ª–µ–Ω–∏–µ, –ø–ª–æ—â–∞–¥—å) –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é 

if print_all_btn:
    st.write(f'''–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å—é –ú–æ—Å–∫–≤—É —Å–µ–π—á–∞—Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –≤ –Ω–µ–π: {sum(df["customers_cnt_home"].values) + sum(df["customers_cnt_move"].values)} —á–µ–ª. –Ω–∞ { df.shape[0]*0.25} –∫–º¬≤''')
else:
    st.write(f'''–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–π–æ–Ω "{adm_zone}" —Å–µ–π—á–∞—Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –≤ –Ω—ë–º: {sum(df["customers_cnt_home"].values) + sum(df["customers_cnt_move"].values)} —á–µ–ª. –Ω–∞ { df.shape[0]*0.25} –∫–º¬≤''')

st.write(f'üî¥ –ö—Ä–∞—Å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ - –º–µ—Å—Ç–∞ —Å –≤—ã—Å–æ–∫–æ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å—é –≤ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö —Ç–∏–ø–∞ "{build_type}"')
st.write(f'üü¢ –ó–µ–ª—ë–Ω—ã–∫ –æ–±–ª–∞—Å—Ç–∏ - –º–µ—Å—Ç–∞ —Å –Ω–∏–∑–∫–æ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å—é –≤ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö —Ç–∏–ø–∞ "{build_type}"')
st.write(f'üîµ –°–∏–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ - —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —É—á—Ä–µ–∂–¥–µ–Ω–∏—è —Ç–∏–ø–∞ "{build_type}"')

#–°–æ–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤(—è—á–µ–µ–∫) –∫–∞—Ä—Ç—ã
tooltip_template = '{metaInfo}'
layers=[
        pdk.Layer("ColumnLayer", #—Å–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
        data=df,
        get_position='[lon,lat]',
        get_elevation=model_key,
        elevation_scale=200,
        radius=250,
        get_fill_color=[f"{model_key} * 42 - 15",f"255-{model_key}*42",20, 255],
        pickable=True,
        auto_highlight=True,
        )]

if show_mfc:
    layers.append(pdk.Layer("ColumnLayer", #—Å–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ú–§–¶
        data=mfc_info_df if print_all_btn else mfc_info_df.loc[mfc_info_df['global_id'].isin(df['nearest_mfc_id'])],
        get_position='[lat,lon]',
        elevation=100,#"WindowCount",
        elevation_scale=1,
        radius=50,
        get_fill_color=[1,1,255, 200],
        pickable=True,
        auto_highlight=True,    
        ))


#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Ä–∞–π–æ–Ω–æ–≤ –∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π
world_map = pdk.Deck(
    map_style='mapbox://styles/mapbox/light-v9',
    initial_view_state=pdk.ViewState(latitude=df['lat'].values[0],longitude=df['lon'].values[0],zoom=11,pitch=50,),
     tooltip = {
        "html": tooltip_template,
        "style": {"backgroundColor": "black","color": "white"}
    },
    layers=layers,
)

map_widget = st.pydeck_chart(world_map)






#–∞–Ω–∞–ª–∏—Ç–∏–∫–∞

col1, col2, col3 = st.columns(3)
col1.metric("–ü—Ä–æ–∂–∏–≤–∞—é—â–∏–µ –∫–æ–ª-–≤–æ", str(sum(df['customers_cnt_home'].values) + sum(df['customers_cnt_move'].values)) + " —á–µ–ª.", str(sum(df['customers_dlt_home'].values)+sum(df['customers_dlt_move'].values)) + " —á–µ–ª.")
col2.metric("–†–∞–±–æ—Ç–∞—é—â–∏–µ –∫–æ–ª-–≤–æ", str(sum(df['customers_cnt_job'].values)) + " —á–µ–ª.", str(sum(df['customers_dlt_job'].values)) + " —á–µ–ª.")
col3.metric("–î–Ω–µ–≤–Ω–æ–µ –∫–æ–ª-–≤–æ", str(sum(df['customers_cnt_day'].values)) + " —á–µ–ª.", str(sum(df['customers_dlt_day'].values)) + " —á–µ–ª.")



st.write('–¢–∞–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
st.dataframe(c_locations)
#st.dataframe(loc_names)
#st.dataframe(s_df)
#st.dataframe(h_w_matrix)
from threading import current_thread
import pandas as pd
import numpy as np
import pydeck as pdk
import shapefile
import streamlit as st
import random 
from stqdm import stqdm
import geopy.distance

import master_block
import left_block

import altair as alt

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="KOD –≤ –º–µ—à–∫–µ App",
    page_icon="üê±",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'About': "–ü—Ä–æ–µ–∫—Ç –ö–û–î –≤ –º–µ—à–∫–µ. *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞* –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–∞–ª–∏—á–Ω—ã—Ö —Å–æ—Ü. —É—á—Ä–µ–∂–¥–µ–Ω–∏–π! –ù–∞—à GitHub: https://github.com/Shar170/KOD_v_meshke_MOS"
    }
    )
st.title('–ü—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã "KOD –≤ –º–µ—à–∫–µ"')


query_params = st.experimental_get_query_params()

id_cell = 0
is_run_build = False


if "target_zid" in query_params:
    id_cell = query_params["target_zid"][0]
    if id_cell.isdigit():
        id_cell = int(id_cell)
        if "windows_count" in query_params:
            windows_count = query_params["windows_count"][0]
            if windows_count.isdigit():
                windows_count = int(windows_count)
                is_run_build = True 
                adm_zone = ''
                address = ''
                build_type = '–ú–§–¶'
                st.info(f"–ù–∞—á–∞—Ç —Ä–∞—Å—á—ë—Ç –≤ —è—á–µ–π–∫–µ **{id_cell}**, –¥–ª—è **–ú–§–¶ {windows_count}**(–æ–∫–æ–Ω) —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-7 –º–∏–Ω—É—Ç!")
else:
    tabs = left_block.tabs
    active_tab = left_block.show_tabs()



# if active_tab == tabs[2]: #–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏
#     help_text = open("README.md").readlines()
#     st.markdown(help_text)
#     st.stop()


def read_shapefile(sf_shape):
    """
    Read a shapefile into a Pandas dataframe with a 'coords' 
    column holding the geometry information. This uses the pyshp
    package
    """
    fields = [x[0] for x in sf_shape.fields][1:]
    records = [y[:] for y in sf_shape.records()]
    #records = sf_shape.records()
    shps = [s.points for s in sf_shape.shapes()]
    df = pd.DataFrame(columns=fields, data=records)
    df = df.assign(coords=shps)
    return df

@st.cache(allow_output_mutation=True)
def load_shp(shp_path, dbf_path):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ shape —Ñ–∞–π–ª–∞ –æ —Ä–∞–∑–±–∏–µ–Ω–∏–∏ –Ω–∞ —è—á–µ–π–∫–∏
    """
    #–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–æ—á–Ω–æ–º —Ä–∞–±–∏–µ–Ω–∏–∏ –ú–û –≤ –ø–∞–º—è—Ç—å
    myshp = open(shp_path, "rb")
    mydbf = open(dbf_path, "rb")
    r = shapefile.Reader(shp=myshp, dbf=mydbf)
    return read_shapefile(r)
    #–≤ –ø–æ–ª–µ coords –ø–µ—Ä–≤–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –µ–≥–æ —É–≥–ª—ã
s_df = load_shp("fishnet2021.shp", "fishnet2021.dbf")

@st.cache
def load_h_w():
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –î–æ–º-–†–∞–±–æ—Ç–∞ 
    """
    #—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –î–æ–º-–†–∞–±–æ—Ç–∞ –∏ –ø—Ä–∏–∫—Ä—É—á–∏–≤–∞–µ–º —Ç—É–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    h_w_matrix = pd.read_csv("04_CMatrix_Home_Work_July.csv")
    h_w_matrix = h_w_matrix.merge(right=s_df, how='inner', left_on='home_zid', right_on='cell_zid')
    h_w_matrix = h_w_matrix.merge(right=s_df, how='inner', left_on='work_zid', right_on='cell_zid')
    h_w_matrix.drop('cell_zid_x', axis=1, inplace=True)
    h_w_matrix.drop('cell_zid_y', axis=1, inplace=True)
    return h_w_matrix

def load_names():
    """ 
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –≤—Å–µ—Ö —Ä–µ–≥–∏–Ω–æ–≤ –∏ –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    """
    loc_names = pd.read_csv('rebuilded_names.csv')
    return loc_names.merge(right=s_df, how='inner', left_on='cell_zid', right_on='cell_zid')

def load_loc_info():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∂–∏–≤–∞—é—â–µ–≥–æ, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –∏ –ø—Ä–æ—Ö–æ–¥—è—â–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
    """
    c_locations = pd.read_csv("june_full_data.csv")
    
    # c_locations['mfc_chance'] = c_locations['mfc_chance'].apply(lambda m: '‚≠ê'*int(m))
    return c_locations

@st.cache
def get_unic_names():
    return  pd.read_csv('rebuilded_names.csv')['adm_name'].drop_duplicates(inplace=False).values

def get_assessment(percent):
    outstr = ""
    if percent < 0.5:                   outstr = '–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è'
    if percent < 0.8 and percent >=0.5: outstr = '–ù–∏–∑–∫–∞—è'
    if percent < 0.9 and percent >=0.8: outstr = '–°—Ä–µ–¥–Ω—è—è'
    if percent < 1.5 and percent >=0.9: outstr = '–í—ã—Å–æ–∫–∞—è'
    if percent > 1.5:                   outstr = '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è'
    return outstr

def load_mfc_info():
    """
    –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ú–§–¶
    """
    mfc = pd.read_csv("mos_coords.csv")
    mfc['District'] = mfc['District'].apply(lambda x: x.replace('—Ä–∞–π–æ–Ω', '').strip())
    mfc['metaInfo'] = "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: " + mfc['ShortName'] + \
                    "<br/>–ê–¥—Ä–µ—Å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è: " + mfc['Address'] + \
                    "<br/>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–∞—è/–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: " + mfc['people_flow_rate'].apply(str) + "/" + mfc['max_people_flow'].apply(str) + \
                    "<br/>–°—Ç–µ–ø–µ–Ω—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏: " + (mfc['people_flow_rate']/ mfc['max_people_flow']).apply(lambda x: f"{x:.{3}f}") + " - " +  (mfc['people_flow_rate']/ mfc['max_people_flow']).apply(lambda x: get_assessment(x).lower())
    return mfc

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
loc_names = load_names()
c_locations = load_loc_info()
adm_names = get_unic_names()
mfc_info_df = load_mfc_info()
b_types_array = ['','–ú–§–¶','–®–∫–æ–ª–∞','–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä']


#—Å–æ–∑–¥–∞—ë–º —Å–µ–ª–µ–∫—Ç –±–æ–∫—Å—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
hider_model = '–°–∫—Ä—ã—Ç—å'
models_dict = {'–°–∫—Ä—ã—Ç—å':'','–¢–æ—á–µ—á–Ω–∞—è –º–æ–¥–µ–ª—å':'mfc_chance_agreg','–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å':'mfc_chance_balance'}
models_dict_cutter = {'–°–∫—Ä—ã—Ç—å':'','–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å':'mfc_chance_balance'}
models_descr = {hider_model:'','–¢–æ—á–µ—á–Ω–∞—è –º–æ–¥–µ–ª—å':'–¢–æ—á–µ—á–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–æ–π–∫–∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è','–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å':'–°—Ç—Ä–æ–∏—Ç —Å–µ–∫—Ç–æ—Ä–∞ –¥–æ—á–µ—Ä–Ω–∏–∫ –∫ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è–º –æ–±–ª–∞—Å—Ç–µ–π. –ü–æ–ª–µ–∑–Ω–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π'}
model_help = ' **–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å** - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –≤ —Å–µ–∫—Ç–æ—Ä–∞ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è.'

if not is_run_build:
    if active_tab == tabs[0]: #–∞–Ω–∞–ª–∏–∑ –±–ª–æ–∫
        build_type = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è',b_types_array, key='build_type')
        if build_type != '':
            show_mfc = (build_type != '') #st.sidebar.checkbox('–ü–æ–∫–∞–∑–∞—Ç—å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ', value=False)
            adm_zone = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –∑–æ–Ω—É',np.concatenate(( [''],adm_names)), help = "–¶–µ–ª–µ–≤–æ–π —Ä–∞–π–æ–Ω –ú–æ—Å–∫–≤—ã")
            model_type = st.sidebar.radio('–ú–æ–¥–µ–ª—å —Ä–∞—Å—á—ë—Ç–æ–≤',models_dict_cutter, key='model_type', help=model_help)
            if adm_zone != '' and model_type != hider_model:
                print_all_btn = False #st.sidebar.checkbox('–í—ã–≤–µ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤', value=(adm_zone== '') )
                model_type = '–¢–æ—á–µ—á–Ω–∞—è –º–æ–¥–µ–ª—å' if st.sidebar.checkbox('–£—Ç–æ—á–Ω–∏—Ç—å –º–µ—Å—Ç–æ –ø–æ—Å—Ç—Ä–æ–π–∫–∏', value = False, help='–í—ã–¥–µ–ª—è–µ—Ç —Ç–æ—á–∫–∏ —Å –Ω–∞–∏–≤—ã—Å—à–µ–π —Å—Ç–µ–ø–µ–Ω—å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å—Ç–æ–π–∫–∏, –≤ –¥–∞–Ω–Ω–æ–º —Ä–∞–π–æ–Ω–µ') else model_type
            else:
                print_all_btn = True
                
            hide_model = model_type == "–ù–∏—á–µ–≥–æ"#st.sidebar.checkbox('–°–∫—Ä—ã—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏?', value=False)
        else:
            show_mfc = False
            adm_zone = ''
            model_type = hider_model
            print_all_btn = True
            hide_model = model_type == "–ù–∏—á–µ–≥–æ"

    elif active_tab == tabs[1]: #—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –±–ª–æ–∫
        print_all_btn = True
        adm_zone = ""# = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –∑–æ–Ω—É',adm_names, )
        show_mfc = True
        build_type = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è',b_types_array, key='build_type')
        address = ''# st.sidebar.text_input(f"–ê–¥—Ä–µ—Å –±—É–¥—É—é—â–µ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è ({build_type})")


        if build_type != '':
            adm_zone = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –∑–æ–Ω—É',np.concatenate(( [''],adm_names)), help = "–¶–µ–ª–µ–≤–æ–π —Ä–∞–π–æ–Ω –ú–æ—Å–∫–≤—ã")
            model_type = st.sidebar.radio('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Ä–∞—Å—á—ë—Ç–æ–≤',models_dict_cutter, key='model_type', help=model_help)      
            
            if adm_zone != '' and model_type != hider_model:
                print_all_btn = False #st.sidebar.checkbox('–í—ã–≤–µ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤', value=(adm_zone== '') )
                model_type = '–¢–æ—á–µ—á–Ω–∞—è –º–æ–¥–µ–ª—å' if st.sidebar.checkbox('–£—Ç–æ—á–Ω–∏—Ç—å –º–µ—Å—Ç–æ –ø–æ—Å—Ç—Ä–æ–π–∫–∏', value = False, help='–í—ã–¥–µ–ª—è–µ—Ç —Ç–æ—á–∫–∏ —Å –Ω–∞–∏–≤—ã—Å—à–µ–π —Å—Ç–µ–ø–µ–Ω—å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å—Ç–æ–π–∫–∏ –≤ –¥–∞–Ω–Ω–æ–º —Ä–∞–π–æ–Ω–µ') else model_type
    
            if model_type != hider_model: 
                hide_model = False#st.sidebar.checkbox('–°–∫—Ä—ã—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏?', value=False)
                if build_type == '–ú–§–¶':
                    windows_count = st.sidebar.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω", value=20)
                if build_type == '–®–∫–æ–ª–∞':
                    windows_count = st.sidebar.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", value=20)
                if build_type == '–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä':
                    windows_count = st.sidebar.number_input("–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å –ª—é–¥–µ–π –≤ –¥–µ–Ω—å", value=2000)
                st.sidebar.write(f'**–î–≤–æ–π–Ω—ã–π –∫–ª–∏–∫–æ–º** –≤—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É, —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤ –Ω–µ–π "{build_type}"')
            else:
                hide_model = True
                st.sidebar.write(f'–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π ')# "{build_type}"')

            is_run_build = False
            #     st.sidebar.error(f"{id_cell} —Ç–∞–∫–æ–π —è—á–µ–π–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        else:
            show_mfc = False
            adm_zone = ''
            model_type = hider_model
            print_all_btn = True
            hide_model = True

    else:
        st.sidebar.error("Something has gone terribly wrong.")


model_key = models_dict[model_type] if not is_run_build else 'mfc_chance_balance'
st.sidebar.image('whiteCat.png', width=100)
#–∏–∑–≤–ª–µ–∫–∞–µ–º —è—á–µ–π–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –º–µ–Ω—é —Ä–∞–π–æ–Ω–∞ –ú–æ—Å–∫–≤—ã

if adm_zone == '':
    df = c_locations.copy()#.loc[c_locations['zid'].isin(loc_names.loc[loc_names['adm_name'] == adm_zone]['cell_zid'])]
else:
    df = c_locations.loc[c_locations['zid'].isin(loc_names.loc[loc_names['adm_name'] == adm_zone]['cell_zid'])]

#–í—ã–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ (–Ω–∞—Å–µ–ª–µ–Ω–∏–µ, –ø–ª–æ—â–∞–¥—å) –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é 



mfc_df = mfc_info_df.copy() if adm_zone == '' else mfc_info_df.loc[mfc_info_df['global_id'].isin(df['nearest_mfc_id'])]

import re
mfc_df['geodata_center'] = mfc_df['geodata_center'].apply(lambda x: [float(coord) for coord in re.findall(r'[0-9]+\.[0-9]+', str(x))] )

map_widget = st.empty()

message = st.empty()

if is_run_build:
    with st.spinner('–ò–¥—ë—Ç –ø—Ä–æ—Å—á—ë—Ç, —ç—Ç–æ –∑–∞–π–º—ë—Ç –æ–∫–æ–ª–æ 5 –º–∏–Ω—É—Ç...') as spinner:
    
        #id_cell = int(id_cell)
        neighbour_distance = 10 #km
        
        #print("–°—Ä–µ–¥–Ω—è—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ –º–æ—Å–∫–≤–µ:", df[model_key].mean())
        import re
        mfc_df['geodata_center'] = mfc_df['geodata_center'].apply(lambda x: [float(coord) for coord in re.findall(r'[0-9]+\.[0-9]+', str(x))] )


        mfc_df['neighbour_mfc'] = mfc_df['global_id'].apply(lambda mfc_id: 
                                                                mfc_df.loc[mfc_df['geodata_center'].apply(
                                                                    lambda mfc_center: 
                                                                    geopy.distance.distance(
                                                                        mfc_center,
                                                                        mfc_df.loc[mfc_df['global_id']==mfc_id]['geodata_center']).km <= neighbour_distance)
                                                                ]['global_id'].values)

        array = mfc_df.loc[mfc_df['global_id'] == df.loc[df['zid']==id_cell]['nearest_mfc_id'].values[0]]['neighbour_mfc'].values[0]
        array = array.tolist()

        array.extend([-1])
        #print("–¥–æ ",mfc_df.shape)
        mfc_df.loc[len(mfc_df)] = {"global_id":-1,       
                        "Address":address,          
                        "ShortName":f'{build_type} "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π"',        
                        "WindowCount": int(40),      
                        "geodata_center":[float(df.loc[df['zid'] == id_cell]['lat'].values[0]),
                                          float(df.loc[df['zid'] == id_cell]['lon'].values[0])],
                        "lon":df.loc[df['zid'] == id_cell]['lat'].values[0],             
                        "lat":df.loc[df['zid'] == id_cell]['lon'].values[0],            
                        "District":"",
                        "metaInfo":"",
                        "neighbour_mfc":array,}

        #stqdm.pandas(desc = "–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π")

        message.info("–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π")
        target_cells = []
        for x in df['zid']:
            if df.loc[df['zid']==x]['nearest_mfc_id'].values[0] in mfc_df.loc[mfc_df['global_id'] == -1]['neighbour_mfc'].values[0]:
                target_cells.append(x)
        #st.write(f'–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å—á–∏—Ç–∞—Ç—å {len(target_cells)} —è—á–µ–µ–∫')

        df['nearest_mfc_id'] = df['zid'].apply(
        lambda x: mfc_df.loc[mfc_df['geodata_center'].apply(
            lambda y: geopy.distance.distance((y[0],y[1]),
                            (float(df.loc[df['zid']==x]['lat'].values[0]),
                            float(df.loc[df['zid']==x]['lon'].values[0]))
                                        ).m
            ).idxmin()]['global_id'] if x in target_cells else df.loc[df['zid']==x]['nearest_mfc_id'].values[0])

        #stqdm.pandas(desc = "–†–∞—á—ë—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–π –¥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π")
        message.info("–†–∞—á—ë—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–π –¥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π")
        df['nearest_mfc_distance'] = -1
        df['nearest_mfc_distance'] = df['zid'].apply(
        lambda x: geopy.distance.distance(mfc_df.loc[mfc_df['global_id'] == df.loc[df['zid']==x]['nearest_mfc_id'].values[0]]['geodata_center'], 
                                        (df.loc[df['zid']==x]['lat'].values[0], df.loc[df['zid']==x]['lon'].values[0])).m)

        people_to_one_window = 3000
        summ_columns = ['customers_cnt_home','customers_cnt_job','customers_cnt_day'] #–ø–æ–ª—è –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è —Å—É–º–º–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π
        mfc_df['people_flow_rate'] = mfc_df['global_id'].apply(lambda x: df.loc[df['nearest_mfc_id'] == x][summ_columns].values.sum())
        mfc_df['max_people_flow'] = mfc_df['WindowCount'] * people_to_one_window 
        mfc_df['future_people_flow_rate'] = mfc_df['global_id'].apply(lambda x: df.loc[df['nearest_mfc_id'] == x][summ_columns].values.sum())


        message.info("–†–∞—á—ë—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–π –¥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π")
        df['nearest_mfc_distance'] = -1
        df['nearest_mfc_distance'] = df['zid'].apply(
        lambda x: geopy.distance.distance(mfc_df.loc[mfc_df['global_id'] == df.loc[df['zid']==x]['nearest_mfc_id'].values[0]]['geodata_center'], 
                                        (df.loc[df['zid']==x]['lat'].values[0], df.loc[df['zid']==x]['lon'].values[0])).m)

        people_to_one_window = 3000
        summ_columns = ['customers_cnt_home','customers_cnt_job','customers_cnt_day'] #–ø–æ–ª—è –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è —Å—É–º–º–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π
        mfc_df['people_flow_rate'] = mfc_df['global_id'].apply(lambda x: df.loc[df['nearest_mfc_id'] == x][summ_columns].values.sum())
        mfc_df['max_people_flow'] = mfc_df['WindowCount'] * people_to_one_window 
        mfc_df['future_people_flow_rate'] = mfc_df['global_id'].apply(lambda x: df.loc[df['nearest_mfc_id'] == x][summ_columns].values.sum())

        message.info("–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≥–æ–Ω–∫–∏ –º–æ–¥–µ–ª–∏")
        if model_key == 'mfc_chance_agreg':
            df[model_key] = 0

            #–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–ª–∏—è–Ω–∏—è –≤–µ—Å–æ–≤ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π
            alphas = {'home':1.0,'job':1.0,'day':1.0, 'move':1.0}
            alphas_dlt = {'home':0.5,'job':0.5,'day':0.5, 'move':0.5}

            stqdm.pandas(desc="–ü–µ—Ä–µ—Ä–∞—Å—á—ë—Ç —Ç–æ—á–µ—Å–Ω–æ–π –º–æ–¥–µ–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

            for feature in ['home', 'job', 'day', 'move']:
                df[model_key] = df[model_key] + alphas[feature] * df[f'customers_cnt_{feature}']
            for feature in ['home', 'job', 'day', 'move']:
                df[model_key] = df[model_key] + alphas_dlt[feature] *  df[f'customers_dlt_{feature}']  
                
            df[model_key] = df[model_key] + (df['nearest_mfc_distance'])# / 43617.48364582916)*1000
            df[model_key] = df[model_key] + (df['logistic'])

            df[model_key] = df[model_key].apply(lambda x: 1 + 5* x / 42070.344117)
        else:
            
            def coeff_flow(percent):
                input_arr = [0.75,0.95,1.1,1.5,5]
                output_arr = [0.3,0.7,1.3,2,2]
                return np.interp(percent, input_arr, output_arr, left=0.0, right=2.0)

            def coeff_distance(km_dist):
                input_arr = [2,3.5,5]
                output_arr = [0.3,0.7,1.0]
                return np.interp(km_dist, input_arr, output_arr, left=0.0,right=1.0)

            def coeff_logistic(log_persent):
                input_arr = [0.5,1,1.5]
                output_arr = [0.3,0.5,1.0,]
                return np.interp(log_persent, input_arr, output_arr, left=0.0,right=1.0)
        
            #–†–∞—Å—á—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
            df[model_key] = df['nearest_mfc_id'].apply(lambda x: coeff_flow(mfc_df.loc[mfc_df['global_id'] == x]['people_flow_rate'].values[0] / mfc_df.loc[mfc_df['global_id'] == x]['max_people_flow'].values[0]) )
            #–†–∞—Å—á—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥—è –∏–∑ –±—É–¥—É—â–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
            df[model_key] = df[model_key] + 0.5 * df['nearest_mfc_id'].apply(lambda x: coeff_flow(mfc_df.loc[mfc_df['global_id'] == x]['future_people_flow_rate'].values[0] / mfc_df.loc[mfc_df['global_id'] == x]['max_people_flow'].values[0]) )
            #–†–∞—Å—á—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥—è –∏–∑ —É–¥–∞–ª—ë–Ω–Ω–æ—Å—Ç–∏ 
            df[model_key] = df[model_key] +  df['nearest_mfc_distance'].apply(lambda x: coeff_distance(x / 1000.0) )
            #–†–∞—Å—á—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥—è –∏–∑ –ª–æ–≥–∏—Å—Ç–∏–∫–∏
            df[model_key] = df[model_key] +  (df['nearest_mfc_id'].apply(lambda x: coeff_logistic(df.loc[df['nearest_mfc_id'] == x]['logistic'].mean())) /  df['logistic']).apply(lambda x: coeff_logistic(x)) #

        sizeDataset = 7
        max_flowrate = mfc_df.loc[mfc_df['global_id'] == -1]['max_people_flow'].values[0]
        current_flowrate = mfc_df.loc[mfc_df['global_id'] == -1]['people_flow_rate'].values[0]
        future_flowrate = mfc_df.loc[mfc_df['global_id'] == -1]['future_people_flow_rate'].values[0]
        flowRate = np.array([random.randint(current_flowrate*0.7,current_flowrate*1.3) for x in range(sizeDataset)])
        mfc_history = pd.DataFrame(data= {'date': [x for x in range(2017,2022)], 
                                        'people_flow_rate' : flowRate, 
                                        'strain': flowRate/max_flowrate})
        base = alt.Chart(mfc_history).encode(
                x = alt.X("date",    title='–ì–æ–¥' ),
            ).properties (
            width = 1000
            )
        bars = base.mark_bar(size = 20).encode(y = alt.Y("people_flow_rate", title='–ü–æ—Ç–æ–∫ –ª—é–¥–µ–π'),).properties (width = 1000)
        line = base.mark_line(strokeWidth= 1.5,color = "red").encode(y=alt.Y('strain',title='–°–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å',axis=alt.Axis()),text = alt.Text('strain'),)
        points = line.mark_circle(color='#00CED1',).encode(y=alt.Y('strain', axis=None))
        points_text = base.mark_text(color='#00CED1',align='left',baseline='middle',dx=-10,dy=-10,).encode(y=alt.Y('strain', axis=None),text=alt.Text('strain'),)
        charts = (bars +  line + points + points_text).resolve_scale(y = 'independent')
        st.altair_chart(charts)
        predic_text = ''
        if future_flowrate > max_flowrate:
            predic_text = f'–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —á—Ç–æ –≤ –±—É–¥—É—â–µ–º –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —É—á—Ä–µ–¥–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω –¥–æ: {int(1.5 * future_flowrate / people_to_one_window)}'
        else:
            predic_text = f'–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —á—Ç–æ –≤ –±–ª–∏–∑–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —É—á—Ä–µ–¥–µ–Ω–∏–µ –Ω–µ –≤—ã—Ä–∞—Å—Ç–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω –¥–∞—Å—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é —Å–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å'#
        
        st.write('–í—ã–≤–æ–¥—ã –ø—Ä–æ–≥–Ω–æ–∑–∞: ', predic_text)

#–°–æ–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤(—è—á–µ–µ–∫) –∫–∞—Ä—Ç—ã
message.empty()
mfc_df['metaInfo'] = "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: " + mfc_df['ShortName'] + \
                    "<br/>–ê–¥—Ä–µ—Å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è: " + mfc_df['Address'] + \
                    "<br/>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–∞—è/–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: " + mfc_df['people_flow_rate'].apply(str) + "/" + mfc_df['max_people_flow'].apply(str) + \
                    "<br/>–°—Ç–µ–ø–µ–Ω—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏: " + (mfc_df['people_flow_rate']/ mfc_df['max_people_flow']).apply(lambda x: f"{x:.{3}f}") + " - " +  (mfc_df['people_flow_rate']/ mfc_df['max_people_flow']).apply(lambda x: get_assessment(x).lower())

#"<b>–Ø—á–µ–π–∫–∞ —Ä–∞–π–æ–Ω–∞</b> " + df['adm_name'].apply(str) +\
df['metaInfo'] = "" + \
            "<br/><b>–ù–∞—Å–ª–µ–Ω–∏–µ</b> : " + df[['customers_cnt_home', 'customers_cnt_move']].sum(axis=1).apply(str)  +\
            "<br/><b>–ü—Ä–∏—Ä–æ—Å—Ç:</b> " + df[['customers_dlt_home', 'customers_dlt_move']].sum(axis=1).apply(str) + \
            "<br/><b>–õ–æ–≥–∏—Å—Ç–∏–∫–∞:</b> " + df['logistic'].apply(str) + \
            ("<br/><b>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:</b> <br/>" + df[model_key].apply(lambda m: 'üî¥'*int(min(5,m))) + df[model_key].apply(lambda m: '‚≠ï'*(5-int(m)))) if model_key != '' else '' + \
            "<br/><b>ID —è—á–µ–π–∫–∏:</b> " + df['zid'].apply(str) + \
            "<br/><b>ID –ú–§–¶:</b> " + df['nearest_mfc_id'].apply(str)
        

if is_run_build:
    preview_lat = df.loc[df['zid'] == id_cell]['lat'].values[0]
    preview_lon = df.loc[df['zid'] == id_cell]['lon'].values[0]
elif len(df) > 0 and not print_all_btn:
    preview_lat = df['lat'].values[0]
    preview_lon = df['lon'].values[0]
else:
    preview_lat = 55.752004
    preview_lon = 37.617734

#–∞–Ω–∞–ª–∏—Ç–∏–∫–∞
col_map, col_tooltip = st.columns((5,1))

master_block.show_map(small_dataset=df,
                        mfc_df=mfc_df,
                        hide_model=hide_model, 
                        model_key=model_key , 
                        adm_zone=adm_zone , 
                        show_mfc=show_mfc,
                        preview_lat=preview_lat,
                        preview_lon=preview_lon,
                        as_html = active_tab == tabs[1],
                        map_container=col_map)


master_block.print_main_tooltip(df, c_locations,adm_zone,print_all_btn, metrics_column =col_tooltip )